?((/*    Programa AFN-E a AFN, AFNE2AFN.LOG, encuentra el AFN equivalente   ))
?((/*        a un AFN com movimientos epsilon dado por el usuario.          ))
?((/* Realizado por: Rodolfo Gonzalez Gonzalez.                             ))

?((/* --------------------------------------------------------------------- ))
?((/* Este programa halla el AFN equivalente al AFN-epsilon dado por el     ))
?((/* usuario. D‚ Q, sigma y F como hechos, tomando como termino la lista   ))
?((/* correspondiente, es decir, para Q la lista con los estados, para      ))
?((/* sigma la lista con el alfabeto y para F la lista con los simbolos     ))
?((/* finales -ver ejemplo en EQUIV.LOG-. D‚ la tabla de transiciones como  ))
?((/* hechos estado. Haga la consulta con la clausula afne2afn, dando el    ))
?((/* estado inicial q0.                                                    ))
?((/* --------------------------------------------------------------------- ))

?((LOAD listas))

?((/* --------------------------------------------------------------------- ))
?((/* hechos que definen un AFN con movimientos epsilon. Estos son dados por))
?((/* el usuario.                                                           ))
?((/* --------------------------------------------------------------------- ))

?((/* --------------------------------------------------------------------- ))
?((/* clausulas para obtener la CERRADURA-epsilon de un conjunto de estados ))
?((/* --------------------------------------------------------------------- ))

((CERR2-e (x1|x2) z)
    (estado x1 () z1)
    (CERR2-e z1 z2)
    (union z1 z2 z3)
    (union (x1) z3 z))
((CERR2-e () ()))

((CERR1-e (x1|x2) z)
    (CERR2-e (x1) z1)
    (CERR1-e x2 z2)
    (union z1 z2 z))
((CERR1-e () ()))

?((/* --------------------------------------------------------------------- ))
?((/* clausulas para resolver un AFN                                        ))
?((/* --------------------------------------------------------------------- ))

((delta2 (x|x1) y z)
    (estado x y z2)
    (delta2 x1 y z3)
    (union z2 z3 z))
((delta2 () y ()))

?((/* --------------------------------------------------------------------- ))
?((/* clausulas para hallar F prima                                         ))
?((/* --------------------------------------------------------------------- ))

((halla-F-prima x y)
    (CERR1-e (x) z1)
    (F z2)
    (interseccion z1 z2 z3)
    (NOT EQ z3 ())
    (union (x) z2 y))
((halla-F-prima x y)
    (F y))

?((/* --------------------------------------------------------------------- ))
?((/* clausulas para hallar delta prima                                     ))
?((/* --------------------------------------------------------------------- ))

((halla-delta-prima x (y1|y2))
    (d1 x y1)
    (halla-delta-prima x y2))
((halla-delta-prima x ()))

((d1 (x1|x2) y)
    (CERR1-e (x1) z1)
    (delta2 z1 y z2)
    (CERR1-e z2 z3)
    (ADDCL ((delta-prima x1 y z3)))
    (d1 x2 y))
((d1 () y))

?((/* --------------------------------------------------------------------- ))
?((/* clausula para hacer la consulta, dado el estado inicial q0            ))
?((/* --------------------------------------------------------------------- ))

((afne2afn x)
    (PP AFN equivalente al AFN-E dado:)
    (Q z1)
    (PP Q para el AFN es: z1)
    (sigma z2)
    (PP sigma para el AFN es: z2)
    (PP q0 para el AFN es: x)
    (F z3)
    (halla-F-prima x z4)
    (PP F prima para el AFN es: z4)
    (halla-delta-prima z1 z2)
    (PP delta prima para el AFn es:)
    (LIST delta-prima))